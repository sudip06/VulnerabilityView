package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"time"
)

// structure for a single JSON data of vulnerability
type Vulnerability struct {
	ID           int       `json:"id"`
	Title        string    `json:"title"`
	DateReported time.Time `json:"date_reported"`
	Severity     int       `json:"severity"`
}

// list of vulnerabilities (globally declared) loaded from local file 'vulns.json'
var vulnerabilities []Vulnerability = getAllVulnerabilities("vulns.json")

// Convert a Vulnerability struct to JSON data
func (v Vulnerability) toString() string {
	bytes, err := json.Marshal(v)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(-1)
	}
	return string(bytes)
}

// Custom implementation of interface json.Unmarshal
func (v *Vulnerability) UnmarshalJSON(raw []byte) error {
	type Alias Vulnerability
	aux := &struct {
		DateReported string `json:"date_reported"`
		*Alias
	}{
		Alias: (*Alias)(v),
	}

	if err := json.Unmarshal(raw, aux); err != nil {
		return nil
	}

	dt, err := time.Parse("2006-02-02", aux.DateReported)
	if err != nil {
		return err
	}
	v.DateReported = dt

	return nil
}

// Custom implementation of interface json.Marshal
func (v Vulnerability) MarshalJSON() ([]byte, error) {
	structVal := &struct {
		ID           int    `json:"id"`
		Title        string `json:"title"`
		DateReported string `json:"date_reported`
		Severity     int    `json:"severity"`
	}{
		ID:           v.ID,
		Title:        v.Title,
		DateReported: v.DateReported.Format(time.RFC3339),
		Severity:     v.Severity,
	}

	return json.Marshal(structVal)
}

// Read all vulnerabilities from JSON file as arary of struct
func getAllVulnerabilities(json_filename string) []Vulnerability {
	raw, err := ioutil.ReadFile(json_filename)

	if err != nil {
		fmt.Println(err.Error())
		os.Exit(-1)
	}

	var c []Vulnerability
	json.Unmarshal(raw, &c)
	return c
}

// Filter input list of vulnerabilities where date_reported >= since
func filterVulnerabilitiesSince(vulnerabilities []Vulnerability, since time.Time) []Vulnerability {
	// list of filtered vulnerabilities
	var c = make([]Vulnerability, 0, 0)

	// iterate over all master json data
	for _, v := range vulnerabilities {
		// apply filter logic
		if v.DateReported.After(since) {
			c = append(c, v)
		}
	}

	// return the filtered result
	return c
}

// Filter input list of vulnerabilities where a given threshold severity
func filterVulnerabilitiesWithAtLeastSeverity(vulnerabilities []Vulnerability, severity int) []Vulnerability {
	// list of filtered vulnerabilities
	var c = make([]Vulnerability, 0, 0)

	// iterate over all master json data
	for _, v := range vulnerabilities {
		// apply filter logic
		if v.Severity >= severity {
			c = append(c, v)
		}
	}

	// return the filtered result
	return c
}

// Filter input list of vulnerabilities with given limit
func filterVulnerabilitiesWithLimit(vulnerabilities []Vulnerability, limit int) []Vulnerability {
	// list of filtered vulnerabilities
	var c = make([]Vulnerability, 0, 0)

	// slice the array to given if possible limit, else ignore
	if limit <= len(vulnerabilities) {
		c = vulnerabilities[:limit]
	}

	// return the filtered result
	return c
}

func handler(w http.ResponseWriter, r *http.Request) {

	var result = make([]Vulnerability, 0, 0)

	result = vulnerabilities

	// filter json data if there is 'since' parameter in HTTP request
	if len(r.FormValue("since")) > 0 {
		if since, err := time.Parse("2006-01-02", r.FormValue("since")); err == nil {
			result = filterVulnerabilitiesSince(result, since)
		}
	}

	// filter json data if there is 'severity_at_least' parameter in HTTP request
	if len(r.FormValue("severity_at_least")) > 0 {
		if severity, err := strconv.Atoi(r.FormValue("severity_at_least")); err == nil {
			result = filterVulnerabilitiesWithAtLeastSeverity(result, severity)
		}
	}

	// filter json data if there is 'limit' parameter in HTTP request
	if len(r.FormValue("limit")) > 0 {
		if limit, err := strconv.Atoi(r.FormValue("limit")); err == nil {
			result = filterVulnerabilitiesWithLimit(result, limit)
		}
	}

	// Display HTTP request parameters (this is just for debugging)
	//fmt.Fprintf(w, "request parameters:\n")
	//fmt.Fprintf(w, "since = %s\n", r.FormValue("since"))
	//fmt.Fprintf(w, "limit = %s\n", r.FormValue("limit"))
	//fmt.Fprintf(w, "severity_at_least = %s\n", r.FormValue("severity_at_least"))

	// Display output (you will eventually remove the line that prints JSON Output:)
	b, _ := json.Marshal(result)
	var json_string = string(b)
	fmt.Fprintf(w, "%s\n", json_string)
}

func main() {
	http.HandleFunc("/api", handler)
	http.ListenAndServe(":8080", nil)
}
