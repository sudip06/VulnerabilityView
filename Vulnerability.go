package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

// structure for a single JSON data of vulnerability
type Vulnerability struct {
	ID           int    `json:"id"`
	Severity     int    `json:"severity"`
	Title        string `json:"title"`
	DateReported string `json:"date_reported"`
}

// list of vulnerabilities (globally declared) loaded from local file 'vulns.json'
var vulnerabilities []Vulnerability = getAllVulnerabilities("vulns.json")

// Read all vulnerabilities from JSON file as arary of struct
func getAllVulnerabilities(json_filename string) []Vulnerability {
	raw, err := ioutil.ReadFile(json_filename)

	if err != nil {
		fmt.Println(err.Error())
		os.Exit(-1)
	}

	var c []Vulnerability
	json.Unmarshal(raw, &c)
	return c
}

// Filter input list of vulnerabilities where date_reported >= since
func filterVulnerabilitiesSince(vulnerabilities []Vulnerability, since time.Time) []Vulnerability {
	// list of filtered vulnerabilities
	var c = make([]Vulnerability, 0, 0)

	// iterate over all master json data
	for _, v := range vulnerabilities {
		// apply filter logic
		if timeC, err := time.Parse("2006-01-02", v.DateReported); err == nil {
			if timeC.After(since) || timeC.Equal(since) {
				c = append(c, v)
			}
		}
	}

	// return the filtered result
	return c
}

// Filter input list of vulnerabilities where a given threshold severity
func filterVulnerabilitiesWithAtLeastSeverity(vulnerabilities []Vulnerability, severity int) []Vulnerability {
	// list of filtered vulnerabilities
	var c = make([]Vulnerability, 0, 0)

	// iterate over all master json data
	for _, v := range vulnerabilities {
		// apply filter logic
		if v.Severity >= severity {
			c = append(c, v)
		}
	}

	// return the filtered result
	return c
}

// Filter input list of vulnerabilities with given limit
func filterVulnerabilitiesWithLimit(vulnerabilities []Vulnerability, limit int) []Vulnerability {
	// list of filtered vulnerabilities
	var c = make([]Vulnerability, 0, 0)

	// slice the array to given if possible limit, else ignore
	if limit <= len(vulnerabilities) {
		c = vulnerabilities[:limit]
		// return the filtered result
		return c
	} else {
		return vulnerabilities
	}
}

func handler(w http.ResponseWriter, r *http.Request) {

	var result = make([]Vulnerability, 0, 0)
	var errCheck bool = false

	result = vulnerabilities

	if r.ParseForm() == nil {
		for k, _ := range r.Form {
			if k != "since" && k != "severity_at_least" && k != "limit" {
				errCheck = true
			}
		}
	}

	// filter json data if there is 'since' parameter in HTTP request
	if len(r.FormValue("since")) > 0 && errCheck == false {
		if since, err := time.Parse("2006-01-02", r.FormValue("since")); err == nil {
			result = filterVulnerabilitiesSince(result, since)
		} else {
			errCheck = true
		}
	}

	// filter json data if there is 'severity_at_least' parameter in HTTP request
	if len(r.FormValue("severity_at_least")) > 0 && errCheck == false {
		if severity, err := strconv.Atoi(r.FormValue("severity_at_least")); err == nil {
			if severity >= 0 && severity < 20 {
				result = filterVulnerabilitiesWithAtLeastSeverity(result, severity)
			} else {
				errCheck = true
			}
		} else {
			errCheck = true
		}
	}

	// filter json data if there is 'limit' parameter in HTTP request
	if len(r.FormValue("limit")) > 0 && errCheck == false {
		if limit, err := strconv.Atoi(r.FormValue("limit")); err == nil {
			if limit > 0 && limit < 20000 {
				result = filterVulnerabilitiesWithLimit(result, limit)
			} else {
				errCheck = true
			}
		} else {
			errCheck = true
		}
	}

	if errCheck == false {
		// Display output (you will eventually remove the line that prints JSON Output:)
		b, _ := json.Marshal(result)
		var json_string = string(b)

		json_string = strings.TrimSpace(json_string)
		if json_string != "[]" {
			fmt.Fprintf(w, "%s\n", json_string)
		} else {
			fmt.Fprintf(w, "No Record found\n")
		}
	} else {
		fmt.Fprintf(w, "Invalid parameters passed\n")
	}
}

func main() {
	http.HandleFunc("/api", handler)
	http.ListenAndServe(":8080", nil)
}
